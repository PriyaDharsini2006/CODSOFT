from tkinter import *
import random
import string

# Create a password generator class
class PasswordGenerator(Tk):

    # Define the __init__ method
    def __init__(self):
        # Call the __init__ method of the Tk class
        super().__init__()

        # Set the title and size of the main window
        self.title("Password Generator")
        self.geometry("550x500")

        # Create a label widget to display the title of the application
        self.title_label = Label(self, text="Password Generator", font=("Arial", 16))
        
        # Create a label widget to display the text "Length"
        self.length_label = Label(self, text="Length of the required password :")

        # Use the grid method to place the label widget on the main window
        self.title_label.grid(row=0, column=0, columnspan=1, padx=10, pady=10)

        # Create an entry widget to allow the user to enter the length of the password
        self.length_entry = Entry(self, width=10, validate="key", validatecommand=(self.register(self.validate_int), "%P"),bg='lightyellow')

        # Use the grid method to place the entry widget on the main window
        self.length_entry.grid(row=1, column=1, sticky="w", padx=10, pady=10)


        # Use the grid method to place the label widget on the main window
        self.length_label.grid(row=1, column=0, sticky="w", padx=10, pady=10)

        # Create an IntVar object to store the complexity value
        self.complexity = IntVar()

        # Create four radiobutton widgets to allow the user to choose the complexity of the password
        self.complexity_1 = Radiobutton(self, text="Lowercase", variable=self.complexity, value=1)
        self.complexity_2 = Radiobutton(self, text="Uppercase + Lowercase", variable=self.complexity, value=2)
        self.complexity_3 = Radiobutton(self, text="Letters + Numbers", variable=self.complexity, value=3)
        self.complexity_4 = Radiobutton(self, text="Letters + Numbers + Symbols", variable=self.complexity, value=4)

        # Use the grid method to place the radiobutton widgets on the main window
        self.complexity_1.grid(row=2, column=0, sticky="w", padx=10, pady=10)
        self.complexity_2.grid(row=3, column=0, sticky="w", padx=10, pady=10)
        self.complexity_3.grid(row=4, column=0, sticky="w", padx=10, pady=10)
        self.complexity_4.grid(row=5, column=0, sticky="w", padx=10, pady=10)

        # Create a button widget to generate the password
        self.generate_button = Button(self, text="Generate", command=self.generate_password)

        # Use the grid method to place the button widget on the main window
        self.generate_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

        # Create a StringVar object to store the password
        self.password = StringVar()

        # Create a label widget to display the generated password
        self.password_label = Label(self, textvariable=self.password, font=("Courier", 12))

        # Use the grid method to place the label widget on the main window
        self.password_label.grid(row=7, column=0, columnspan=2, padx=10, pady=10)

    # Define a function to validate the input as an integer
    def validate_int(self, input):
        # If the input is empty or a digit, return True
        if input == "" or input.isdigit():
            return True
        # Otherwise, return False
        else:
            return False

    # Define a function to generate a password
    def generate_password(self):
        # Get the length and complexity values from the user input
        length = int(self.length_entry.get())
        complexity = self.complexity.get()

        # Create a list of possible characters based on the complexity level
        if complexity == 1:
            # Only lowercase letters
            characters = list(string.ascii_lowercase)
        elif complexity == 2:
            # Lowercase and uppercase letters
            characters = list(string.ascii_letters)
        elif complexity == 3:
            # Letters and numbers
            characters = list(string.ascii_letters + string.digits)
        elif complexity == 4:
            # Letters, numbers, and symbols
            characters = list(string.ascii_letters + string.digits + string.punctuation)
        else:
            # Invalid complexity level
            self.password.set("Invalid complexity level")
            return

        # Create an empty string to store the password
        password = ""

        # Loop for the length of the password
        for i in range(length):
            # Randomly select a character from the list and append it to the password
            password += random.choice(characters)

        # Update the StringVar object with the password
        self.password.set(password)

# Create an instance of the PasswordGenerator class
password_generator = PasswordGenerator()

# Run the main loop of the application
password_generator.mainloop()
